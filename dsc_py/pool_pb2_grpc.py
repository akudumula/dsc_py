# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pool_pb2 as pool__pb2


class poolStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send = channel.unary_stream(
                '/adarsh.dsc.pool/send',
                request_serializer=pool__pb2.sendRequest.SerializeToString,
                response_deserializer=pool__pb2.sendReply.FromString,
                )
        self.transaction = channel.unary_unary(
                '/adarsh.dsc.pool/transaction',
                request_serializer=pool__pb2.transactionRequest.SerializeToString,
                response_deserializer=pool__pb2.transactionReply.FromString,
                )
        self.transactions = channel.unary_unary(
                '/adarsh.dsc.pool/transactions',
                request_serializer=pool__pb2.transactionsRequest.SerializeToString,
                response_deserializer=pool__pb2.transactionReply.FromString,
                )


class poolServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_poolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send': grpc.unary_stream_rpc_method_handler(
                    servicer.send,
                    request_deserializer=pool__pb2.sendRequest.FromString,
                    response_serializer=pool__pb2.sendReply.SerializeToString,
            ),
            'transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.transaction,
                    request_deserializer=pool__pb2.transactionRequest.FromString,
                    response_serializer=pool__pb2.transactionReply.SerializeToString,
            ),
            'transactions': grpc.unary_unary_rpc_method_handler(
                    servicer.transactions,
                    request_deserializer=pool__pb2.transactionsRequest.FromString,
                    response_serializer=pool__pb2.transactionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'adarsh.dsc.pool', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class pool(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/adarsh.dsc.pool/send',
            pool__pb2.sendRequest.SerializeToString,
            pool__pb2.sendReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adarsh.dsc.pool/transaction',
            pool__pb2.transactionRequest.SerializeToString,
            pool__pb2.transactionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adarsh.dsc.pool/transactions',
            pool__pb2.transactionsRequest.SerializeToString,
            pool__pb2.transactionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
